#Prim Algo

import heapq

class Solution:
    def spanningTree(self, V, adj):
        pq = [(0, 0)]  # (wt, node)
        vis = [0] * V
        sum = 0

        while pq:
            wt, node = heapq.heappop(pq)

            if vis[node] == 1:
                continue

            vis[node] = 1
            sum += wt

            for neighbor in adj[node]:
                adjNode, edW = neighbor[0], neighbor[1]
                if not vis[adjNode]:
                    heapq.heappush(pq, (edW, adjNode))

        return sum

if __name__ == "__main__":
    V = 5
    edges = [[0, 1, 2], [0, 2, 1], [1, 2, 1], [2, 3, 2], [3, 4, 1], [4, 2, 2]]
    adj = [[] for _ in range(V)]

    for it in edges:
        adj[it[0]].append([it[1], it[2]])
        adj[it[1]].append([it[0], it[2]])

    obj = Solution()
    result = obj.spanningTree(V, adj)
    print("The sum of all the edge weights:", result)





def find(parent, i):
    if parent[i] != i:
        parent[i] = find(parent, parent[i])
    return parent[i]

def union(parent, rank, x, y):
    if rank[x] < rank[y]:
        parent[x] = y
    elif rank[x] > rank[y]:
        parent[y] = x
    else:
        parent[y] = x
        rank[x] += 1

def kruskalMST(vertices, edges):
    result = []
    i = 0
    e = 0
    edges = sorted(edges, key=lambda item: item[2])
    parent = [node for node in range(vertices)]
    rank = [0] * vertices

    while e < vertices - 1:
        u, v, w = edges[i]
        i += 1
        x = find(parent, u)
        y = find(parent, v)
        if x != y:
            e += 1
            result.append([u, v, w])
            union(parent, rank, x, y)

    minimumCost = 0
    print("Edges in the constructed MST")
    for u, v, weight in result:
        minimumCost += weight
        print("%d -- %d == %d" % (u, v, weight))
    print("Minimum Spanning Tree", minimumCost)

if __name__ == '__main__':
    vertices = 4
    edges = [[0, 1, 10], [0, 2, 6], [0, 3, 5], [1, 3, 15], [2, 3, 4]]

    kruskalMST(vertices, edges)

# BellmanFord algo
def bellman_ford(V, edges, S):
    dist = [float('inf')] * V
    dist[S] = 0

    for i in range(V - 1):
        for edge in edges:
            u, v, wt = edge
            if dist[u] != float('inf') and dist[u] + wt < dist[v]:
                dist[v] = dist[u] + wt

    # Nth relaxation to check negative cycle
    for edge in edges:
        u, v, wt = edge
        if dist[u] != float('inf') and dist[u] + wt < dist[v]:
            return [-1]

    return dist

if __name__ == "__main__":
    V = 6
    edges = [
        [3, 2, 6],
        [5, 3, 1],
        [0, 1, 5],
        [1, 5, -3],
        [1, 2, -2],
        [3, 4, -2],
        [2, 4, 3]
    ]

    S = 0
    dist = bellman_ford(V, edges, S)

    for d in dist:
        print(d, end=" ")

    print()


#Floyd
def shortest_distance(matrix):
    n = len(matrix)

    for i in range(n):
        for j in range(n):
            if matrix[i][j] == -1:
                matrix[i][j] = float('inf')
            if i == j:
                matrix[i][j] = 0

    for k in range(n):
        for i in range(n):
            for j in range(n):
                matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j])

    for i in range(n):
        for j in range(n):
            if matrix[i][j] == float('inf'):
                matrix[i][j] = -1

if __name__ == "__main__":
    V = 4
    matrix = [[-1] * V for _ in range(V)]
    matrix[0][1] = 2
    matrix[1][0] = 1
    matrix[1][2] = 3
    matrix[3][0] = 3
    matrix[3][1] = 5
    matrix[3][2] = 4

    shortest_distance(matrix)

    for row in matrix:
        for cell in row:
            print(cell, end=" ")
        print()




#Dijkstra

import heapq

iPair = tuple

def addEdge(adj, u, v, w):
    adj[u].append((v, w))
    adj[v].append((u, w))

def shortestPath(adj, V, src):
    pq = []
    heapq.heappush(pq, (0, src))
    dist = [float('inf')] * V
    dist[src] = 0

    while pq:
        d, u = heapq.heappop(pq)

        for v, weight in adj[u]:
            if dist[v] > dist[u] + weight:
                dist[v] = dist[u] + weight
                heapq.heappush(pq, (dist[v], v))

    for i in range(V):
        print(f"{i} \t\t {dist[i]}")

if __name__ == "__main__":
    V = 9
    adj = [[] for _ in range(V)]

    addEdge(adj, 0, 1, 4)
    addEdge(adj, 0, 7, 8)
    addEdge(adj, 1, 2, 8)
    addEdge(adj, 1, 7, 11)
    addEdge(adj, 2, 3, 7)
    addEdge(adj, 2, 8, 2)
    addEdge(adj, 2, 5, 4)
    addEdge(adj, 3, 4, 9)
    addEdge(adj, 3, 5, 14)
    addEdge(adj, 4, 5, 10)
    addEdge(adj, 5, 6, 2)
    addEdge(adj, 6, 7, 1)
    addEdge(adj, 6, 8, 6)
    addEdge(adj, 7, 8, 7)

    shortestPath(adj, V, 0)




